
variables:
  SCALA_BUILD_IMAGE_2_13_0: "hseeberger/scala-sbt:8u212_1.2.8_2.13.0"
  PHILO_JAR_NAME: "philo.jar"
  PHILO_MERGEREQUESTS_JAR_FOLDER: "s3://thetradedesk-mlplatform-us-east-1/libs/philo/jars/mergerequests"
  PHILO_SNAPSHOTS_JAR_FOLDER: "s3://thetradedesk-mlplatform-us-east-1/libs/philo/jars/snapshots"
  PHILO_PROD_JAR_FOLDER: "s3://thetradedesk-mlplatform-us-east-1/libs/philo/jars/prod"
  PHILO_ASSEMBLY_OUT: "$CI_PROJECT_DIR/philo/target/scala-2.12/philo.jar"
  PHILO_SCRIPTS_SOURCE: "src/main/python"
  PHILO_MODEL_RUN_SCRIPT: "modelrun.sh"
  PHILO_SETUP_SCRIPT: "clustersetup.sh"
  PHILO_SCRIPTS_DEST: "s3://thetradedesk-mlplatform-us-east-1/libs/philo/scripts/"
  PHILO_MERGEREQUESTS_SCRIPTS_DEST: "s3://thetradedesk-mlplatform-us-east-1/libs/philo/scripts/mergerequests/$CI_COMMIT_REF_SLUG/"
  PYTHON_BUILD_IMAGE: "python:3.8"
  PHILO_TRAINING_IMAGE: "philo-training"

philo:test:
  image: "$SCALA_BUILD_IMAGE_2_13_0"
  stage: test
  cache:
    policy: pull
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "philo/src/**/*"
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes:
        - "philo/src/**/*"
  before_script:
    # we don't need to set up the machine for S3 in order to run tests
    - git checkout -B "$CI_COMMIT_REF_NAME" "$CI_COMMIT_SHA"
  script:
    - pushd ./philo/
    - sbt test
    - popd
    - echo "ran philo_test"


philo:push_bits_merge_request:
  image: "$SCALA_BUILD_IMAGE_2_13_0"
  stage: assembly_upload
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "philo/src/**/*"
  script:
    - pushd ./philo/
    - sbt "set test in assembly := {}" clean assembly
    - DEST=${PHILO_MERGEREQUESTS_JAR_FOLDER}/${CI_COMMIT_REF_NAME}/${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
    - aws s3 cp ${PHILO_ASSEMBLY_OUT} ${DEST}/${PHILO_JAR_NAME}
    - popd
    - echo "ran PHILO_push_bits_merge_request"

philo:push_bits_master_snapshot:
  image: "$SCALA_BUILD_IMAGE_2_13_0"
  stage: assembly_upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes:
        - "philo/src/**/*"
  script:
    - pushd ./philo/
    - sbt "set test in assembly := {}" clean assembly
    - DEST=${PHILO_SNAPSHOTS_JAR_FOLDER}/${CI_COMMIT_REF_NAME}/${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
    - aws s3 cp ${PHILO_ASSEMBLY_OUT} ${DEST}/${PHILO_JAR_NAME}
    - popd
    - echo "ran PHILO_push_bits_master_snapshot"

philo:push_scripts:
  image: "$PYTHON_BUILD_IMAGE"
  stage: assembly_upload
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes:
        - "philo/src/main/python/modelrun.sh"
        - "philo/src/main/python/clustersetup.sh"
  script:
    - pushd ./philo/
    - aws s3 cp ${PHILO_SCRIPTS_SOURCE}/${PHILO_SETUP_SCRIPT} ${PHILO_SCRIPTS_DEST}
    - aws s3 cp ${PHILO_SCRIPTS_SOURCE}/${PHILO_MODEL_RUN_SCRIPT} ${PHILO_SCRIPTS_DEST}
    - popd
    - echo "ran push_set_scripts"

philo:push_scripts_merge_request:
  image: "$PYTHON_BUILD_IMAGE"
  stage: assembly_upload
  rules:
   - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
     changes:
      - "philo/**/*"
  script:
    - pushd ./philo/
    - aws s3 cp ${PHILO_SCRIPTS_SOURCE}/${PHILO_SETUP_SCRIPT} ${PHILO_MERGEREQUESTS_SCRIPTS_DEST}
    - aws s3 cp ${PHILO_SCRIPTS_SOURCE}/${PHILO_MODEL_RUN_SCRIPT} ${PHILO_MERGEREQUESTS_SCRIPTS_DEST}
    - popd
    - echo "ran push_set_scripts"

philo:build_push_training_container:
  image: "$PYTHON_BUILD_IMAGE"
  stage: test
  services:
    - docker:dind
  before_script:
    - apt update
    - apt-get install docker.io -y
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "philo/src/main/python/*"
      when: manual
  script:
    - export DOCKER_HOST=$DOCKER_PORT
    - pushd ./philo/src/main/python/
    - docker login -u ${DOCKER_INTERNAL_USER} -p ${DOCKER_INTERNAL_PASS} ${DOCKER_INTERNAL_REGISTRY}
    - docker build -f Dockerfile.prod -t ${PHILO_TRAINING_IMAGE}:${CI_COMMIT_REF_SLUG} .
    - docker tag ${PHILO_TRAINING_IMAGE}:${CI_COMMIT_REF_SLUG} ${DOCKER_INTERNAL_REGISTRY}/${PHILO_TRAINING_IMAGE}:${CI_COMMIT_REF_SLUG}
    - docker push ${DOCKER_INTERNAL_REGISTRY}/${PHILO_TRAINING_IMAGE}:${CI_COMMIT_REF_SLUG}
    - popd
    - echo "latest training container pushed"

philo:build_push_release_container:
  image: "$PYTHON_BUILD_IMAGE"
  stage: deploy
  services:
    - docker:dind
  before_script:
    - apt update
    - apt-get install docker.io -y
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes:
        - "philo/src/main/python/*"
      when: manual
  script:
    - export DOCKER_HOST=$DOCKER_PORT
    - pushd ./philo/src/main/python/
    - docker login -u ${DOCKER_INTERNAL_USER} -p ${DOCKER_INTERNAL_PASS} ${DOCKER_INTERNAL_REGISTRY}
    - docker build -f Dockerfile.prod -t ${PHILO_TRAINING_IMAGE}:release .
    - docker tag ${PHILO_TRAINING_IMAGE}:release ${DOCKER_INTERNAL_REGISTRY}/${PHILO_TRAINING_IMAGE}:release
    - docker push ${DOCKER_INTERNAL_REGISTRY}/${PHILO_TRAINING_IMAGE}:release
    - popd
    - echo "latest training container pushed"


philo:deploy_release:
  image: "$SCALA_BUILD_IMAGE_2_13_0"
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes:
        - "philo/src/**/*"
      when: manual
      allow_failure: false
  script:
    - pushd ./philo/
    - sbt "set test in assembly := {}" clean assembly
    - aws s3 cp ${PHILO_ASSEMBLY_OUT} ${PHILO_PROD_JAR_FOLDER}/${PHILO_JAR_NAME}
    - popd
    - echo "ran philo_deploy_release"

